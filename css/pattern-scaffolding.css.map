{"version":3,"sources":["includes/_fonts.scss","includes/_design-variables.scss","pattern-scaffolding.scss","../../node_modules/root-rhythm/sass/_rr-grid.scss","../../node_modules/root-rhythm/sass/_rr-util.scss","../../node_modules/root-rhythm/sass/_rr-baseline.scss","../../node_modules/root-rhythm/sass/_rr-config.scss"],"names":[],"mappings":"AAEA,0EAAY;AACZ;EACE,4BAA2B;EAC3B,mBAAkB;EAClB,oBAAmB;EACnB,qEAAoE;EACpE,maAAka,EAAA;;AAGpa;EACE,4BAA2B;EAC3B,mBAAkB;EAClB,oBAAmB;EACnB,qEAAoE;EACpE,maAAka,EAAA;;AAGpa;EACE,4BAA2B;EAC3B,mBAAkB;EAClB,iBAAgB;EAChB,qEAAoE;EACpE,maAAka,EAAA;;AAGpa;EACE,4BAA2B;EAC3B,mBAAkB;EAClB,iBAAgB;EAChB,qEAAoE;EACpE,maAAka,EAAA;;AAGpa;EACE,4BAA2B;EAC3B,mBAAkB;EAClB,iBAAgB;EAChB,qEAAoE;EACpE,maAAka,EAAA;;AAGpa;EACE,4BAA2B;EAC3B,mBAAkB;EAClB,iBAAgB;EAChB,qEAAoE;EACpE,maAAka,EAAA;;AAGpa;EACE,4BAA2B;EAC3B,mBAAkB;EAClB,kBAAiB;EACjB,qEAAoE;EACpE,maAAka,EAAA;;AAGpa;EACE,4BAA2B;EAC3B,mBAAkB;EAClB,kBAAiB;EACjB,qEAAoE;EACpE,maAAka,EAAA;;AAIpa;EACE,+BAA6B;EAC7B,mBAAkB;EAClB,oBAAmB;EACnB,qEAAmE;EACnE,sTAAiT,EAAA;;AAGnT;EACE,+BAA6B;EAC7B,mBAAkB;EAClB,kBAAiB;EACjB,qEAAmE;EACnE,sTAAiT,EAAA;;AAGnT;EACE,wCC5E0C,ED6E3C;;AAED;EACE,6DCvF4D,EDwF7D;;AAED;EACE,wCCpF0C,EDqF3C;;AAED;EACE,+DC5F+D,ED6FhE;;AAED;EACE,2CClF8C,EDmF/C;;AEzFD;EACE,gBAAe,EAChB;;AAGD;EACE,mBAAkB;EAClB,aAAY;EACZ,mBAAkB;EAClB,oBDqUkB;ECpUlB,mBAAkB;EAClB,gBAAe,EAChB;;AAED;EACE,eAAc;EACd,iBAAgB,EAEjB;EAJD;IC8II,oBCxI0D;IDyI1D,+BAAsB;YAAtB,uBAAsB,EACvB;ECvGC;IFzCJ;MC0JU,qBAAa;MAAb,qBAAa;MAAb,cAAa;MACb,oBAAe;UAAf,gBAAe;MACf,2BAAoB;UAApB,wBAAoB;cAApB,qBAAoB;MACpB,0BAA8B;UAA9B,uBAA8B;cAA9B,+BAA8B,EDzJvC;MAJD;QCkKY,oBAAc;YAAd,mBAAc;gBAAd,eAAc;QACd,wBAAqC;QAEnC,iBAA2B,EAE9B,EAAA;EC9HP;IFzCJ;MCkKY,oBAAc;UAAd,mBAAc;cAAd,eAAc;MACd,wBAAqC;MAEnC,iBAA2B,EAE9B,EAAA;EAe8B;IDtLzC;MCuLI,cAAa;MAUX,qBAAoB;MAId,iBF3KyB;MEuK/B,qBAAoB;MAApB,qBAAoB;MAApB,qBAAoB;MAApB,qBAAoB,ED7LzB;MAJD;QC0LM,YAAW;QACX,UAAS,EACV;MCnJD;QFzCJ;UCqMY,eFlKI;UEqKJ,iDAA8D,EDpMzE,EAAA;MEqCG;QFzCJ;UCwMY,iDAA8D,EDpMzE,EAAA;MEqCG;QFzCJ;UCqMY,eFlJI,EC/Cf,EAAA,EAAA;;AAED;EACE,4BEmB4C;EFlB5C,0BDqTmB;ECpTnB,mBAAkB;EAClB,iBAAgB;EGEhB,gBJyNS;EIxNT,kBAAkC,EHInC;EEwBG;IFnCJ;MGME,gBJqOS;MIpOT,kBAAkC,EHInC,EAAA;EAXD;IAQI,UER0D;IFS1D,aET0D,EFU3D;;AAGH;EGPE,mBJuNY;EItNZ,kBAAkC;EHQlC,sBEf4D,EFgB7D;EEmBG;IFtBJ;MGPE,mBJmOY;MIlOZ,kBAAkC,EHSnC,EAAA;;AAED;EACE,eAAc;EACd,aEpB4D;EFqB5D,sBErB4D;EFsB5D,4BEF4C;EFG5C,mBAAkB,EACnB;;AAED;EACE,iBAAgB,EACjB;;AAED;EACE,oBE/B4D,EFgC7D;;AAED;EG5BE,gBJyNS;EIxNT,oBAAkC;EH6BlC,gBEpC4D,EFqC7D;EEFG;IFDJ;MG5BE,gBJqOS;MIpOT,oBAAkC,EH8BnC,EAAA;;AAED;EAEI,UEzC0D;EF0C1D,aE1C0D,EF2C3D;;AAJH;EAOI,WAAU;EACV,uBAAsB,EACvB;;AAGH;EACE,cAAa,EACd;;AAED;EAEI,oBAAmB,EACpB;;AAED;EALF;IAMI,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,oBAAmB;IACnB,mBAAkB,EAQrB;IAhBD;MAWM,mBAAkB;MAClB,iBAAgB;MAChB,kBAAiB,EAClB,EAAA;;AAIL;EGcI,mBAAkB;EAClB,OAAM;EACN,SAAQ;EACR,UAAS;EACT,QAAO;EACP,iBC1He;ED2Hf,kBAAiB;EACjB,mBAAkB;EAClB,kBAAiB;EACjB,YAAW;EACX,cAAa;EACb,qBAAoB;EACpB,0BC7GqB;EDqHf,+BAAoC;EAItC,uJAvI0G;EAwI1G,qCAAwC,EAG7C;EDhFC;IFsCJ;MGkCU,+BAAoC;MAItC,qJAvI0G;MAwI1G,mCAAwC,EAG7C,EAAA;EDhFC;IFsCJ;MGkCU,+BAAoC;MAItC,wJAvI0G;MAwI1G,mCAAwC,EAG7C,EAAA;EDhFC;IFsCJ;MGoCU,YAAW;MAEb,wJAvI0G;MAwI1G,mCAAwC,EAG7C,EAAA;EDhFC;IFsCJ;MGoCU,YAAW;MAEb,wJAvI0G;MAwI1G,mCAAwC,EAG7C,EAAA;;AH1CH;EG6CI,mBAAkB;EAClB,OAAM;EACN,SAAQ;EACR,UAAS;EACT,QAAO;EACP,kBAAiB;EACjB,mBAAkB;EAClB,kBAAiB;EACjB,YAAW;EACX,cAAa;EACb,qBAAoB;EACpB,0BC3IqB;ED+IjB,gLDrIsD,ECwI3D;EDrGC;IFsCJ;MG4DQ,gLDrIsD,ECwI3D,EAAA;EDrGC;IFsCJ;MG4DQ,gLDrIsD,ECwI3D,EAAA;EDrGC;IFsCJ;MG4DQ,gLDrIsD,ECwI3D,EAAA;EDrGC;IFsCJ;MG4DQ,gLDrIsD,ECwI3D,EAAA;;AH3DH;EACE,mBAAkB;EAClB,UAAS;EACT,YAAW;EACX,aAAY,EAab;EAjBD;IAOI,sBAAqB;IAErB,iBAAgB;IAChB,mBAAkB;IAClB,sBDsNoB;ICrNpB,0BDqNoB;ICpNpB,gBAAe;IACf,kBAAiB;IACjB,eAAc,EACf;;AAGH;EACE,mBAAkB,EACnB;;AAED;EACE,cAAa;EAEb,mBAAkB;EAClB,OAAM;EACN,YAAW;EACX,eDoNc;ECnNd,aAAY,EACb;;AAED;EAEI,0BD8MY,EC7Mb;;AAHH;EAMI,eAAc,EACf","file":"pattern-scaffolding.css","sourcesContent":["//sass-lint:disable no-url-domains, no-url-protocols, no-duplicate-properties\n//@import url('https://cloud.typography.com/7932236/6118192/css/fonts.css');\n@import url('https://cloud.typography.com/7932236/7395812/css/fonts.css');\n@font-face {\n  font-family: 'AvenirNextLT';\n  font-style: normal;\n  font-weight: normal;\n  src: url('../fonts/e9167238-3b3f-4813-a04a-a384394eed42.eot?#iefix');\n  src: url('../fonts/e9167238-3b3f-4813-a04a-a384394eed42.eot?#iefix') format('eot'), url('../fonts/2cd55546-ec00-4af9-aeca-4a3cd186da53.woff2') format('woff2'), url('../fonts/1e9892c0-6927-4412-9874-1b82801ba47a.woff') format('woff'), url('../fonts/46cf1067-688d-4aab-b0f7-bd942af6efd8.ttf') format('truetype'), url('../fonts/52a192b1-bea5-4b48-879f-107f009b666f.svg#52a192b1-bea5-4b48-879f-107f009b666f') format('svg');\n}\n\n@font-face {\n  font-family: 'AvenirNextLT';\n  font-style: italic;\n  font-weight: normal;\n  src: url('../fonts/d1fddef1-d940-4904-8f6c-17e809462301.eot?#iefix');\n  src: url('../fonts/d1fddef1-d940-4904-8f6c-17e809462301.eot?#iefix') format('eot'), url('../fonts/7377dbe6-f11a-4a05-b33c-bc8ce1f60f84.woff2') format('woff2'), url('../fonts/92b66dbd-4201-4ac2-a605-4d4ffc8705cc.woff') format('woff'), url('../fonts/18839597-afa8-4f0b-9abb-4a30262d0da8.ttf') format('truetype'), url('../fonts/1de7e6f4-9d4d-47e7-ab23-7d5cf10ab585.svg#1de7e6f4-9d4d-47e7-ab23-7d5cf10ab585') format('svg');\n}\n\n@font-face {\n  font-family: 'AvenirNextLT';\n  font-style: normal;\n  font-weight: 500;\n  src: url('../fonts/1a7c9181-cd24-4943-a9d9-d033189524e0.eot?#iefix');\n  src: url('../fonts/1a7c9181-cd24-4943-a9d9-d033189524e0.eot?#iefix') format('eot'), url('../fonts/627fbb5a-3bae-4cd9-b617-2f923e29d55e.woff2') format('woff2'), url('../fonts/f26faddb-86cc-4477-a253-1e1287684336.woff') format('woff'), url('../fonts/63a74598-733c-4d0c-bd91-b01bffcd6e69.ttf') format('truetype'), url('../fonts/a89d6ad1-a04f-4a8f-b140-e55478dbea80.svg#a89d6ad1-a04f-4a8f-b140-e55478dbea80') format('svg');\n}\n\n@font-face {\n  font-family: 'AvenirNextLT';\n  font-style: italic;\n  font-weight: 500;\n  src: url('../fonts/77a9cdce-ea6a-4f94-95df-e6a54555545e.eot?#iefix');\n  src: url('../fonts/77a9cdce-ea6a-4f94-95df-e6a54555545e.eot?#iefix') format('eot'), url('../fonts/3f380a53-50ea-4a62-95c5-d5d8dba03ab8.woff2') format('woff2'), url('../fonts/8344e877-560d-44d4-82eb-9822766676f9.woff') format('woff'), url('../fonts/b28b01d9-78c5-46c6-a30d-9a62c8f407c5.ttf') format('truetype'), url('../fonts/ed4d3c45-af64-4992-974b-c37cd12a9570.svg#ed4d3c45-af64-4992-974b-c37cd12a9570') format('svg');\n}\n\n@font-face {\n  font-family: 'AvenirNextLT';\n  font-style: normal;\n  font-weight: 600;\n  src: url('../fonts/12d643f2-3899-49d5-a85b-ff430f5fad15.eot?#iefix');\n  src: url('../fonts/12d643f2-3899-49d5-a85b-ff430f5fad15.eot?#iefix') format('eot'), url('../fonts/aad99a1f-7917-4dd6-bbb5-b07cedbff64f.woff2') format('woff2'), url('../fonts/91b50bbb-9aa1-4d54-9159-ec6f19d14a7c.woff') format('woff'), url('../fonts/a0f4c2f9-8a42-4786-ad00-fce42b57b148.ttf') format('truetype'), url('../fonts/99affa9a-a5e9-4559-bd07-20cf0071852d.svg#99affa9a-a5e9-4559-bd07-20cf0071852d') format('svg');\n}\n\n@font-face {\n  font-family: 'AvenirNextLT';\n  font-style: italic;\n  font-weight: 600;\n  src: url('../fonts/770d9a7e-8842-4376-9319-8f2c8b8e880d.eot?#iefix');\n  src: url('../fonts/770d9a7e-8842-4376-9319-8f2c8b8e880d.eot?#iefix') format('eot'), url('../fonts/687932cb-145b-4690-a21d-ed1243db9e36.woff2') format('woff2'), url('../fonts/bc350df4-3100-4ce1-84ce-4a5363dbccfa.woff') format('woff'), url('../fonts/bc13ae80-cd05-42b4-b2a9-c123259cb166.ttf') format('truetype'), url('../fonts/4862b373-2643-46b1-b0b5-88537c52d15c.svg#4862b373-2643-46b1-b0b5-88537c52d15c') format('svg');\n}\n\n@font-face {\n  font-family: 'AvenirNextLT';\n  font-style: normal;\n  font-weight: bold;\n  src: url('../fonts/dccb10af-07a2-404c-bfc7-7750e2716bc1.eot?#iefix');\n  src: url('../fonts/dccb10af-07a2-404c-bfc7-7750e2716bc1.eot?#iefix') format('eot'), url('../fonts/14c73713-e4df-4dba-933b-057feeac8dd1.woff2') format('woff2'), url('../fonts/b8e906a1-f5e8-4bf1-8e80-82c646ca4d5f.woff') format('woff'), url('../fonts/890bd988-5306-43ff-bd4b-922bc5ebdeb4.ttf') format('truetype'), url('../fonts/ed104d8c-7f39-4e8b-90a9-4076be06b857.svg#ed104d8c-7f39-4e8b-90a9-4076be06b857') format('svg');\n}\n\n@font-face {\n  font-family: 'AvenirNextLT';\n  font-style: italic;\n  font-weight: bold;\n  src: url('../fonts/ac2d4349-4327-448f-9887-083a6a227a52.eot?#iefix');\n  src: url('../fonts/ac2d4349-4327-448f-9887-083a6a227a52.eot?#iefix') format('eot'), url('../fonts/eaafcb26-9296-4a57-83e4-4243abc03db7.woff2') format('woff2'), url('../fonts/25e83bf5-47e3-4da7-98b1-755efffb0089.woff') format('woff'), url('../fonts/4112ec87-6ded-438b-83cf-aaff98f7e987.ttf') format('truetype'), url('../fonts/ab1835cb-df6f-4d8d-b8ee-3075f5ba758d.svg#ab1835cb-df6f-4d8d-b8ee-3075f5ba758d') format('svg');\n}\n\n\n@font-face{\n  font-family:\"TradeGothicCond\";\n  font-style: normal;\n  font-weight: normal;\n  src:url(\"../fonts/bfb75240-a1a5-48e9-a762-7783ab69fe01.eot?#iefix\");\n  src:url(\"../fonts/bfb75240-a1a5-48e9-a762-7783ab69fe01.eot?#iefix\") format(\"eot\"),url(\"../fonts/ee3d290f-f853-4ff3-913e-7bae693a43ec.woff2\") format(\"woff2\"),url(\"../fonts/13f010e4-8178-40a5-a790-11a6532a964c.woff\") format(\"woff\"),url(\"../fonts/bbf9164f-cec8-4c93-bf8d-94be44354842.ttf\") format(\"truetype\");\n}\n\n@font-face{\n  font-family:\"TradeGothicCond\";\n  font-style: normal;\n  font-weight: bold;\n  src:url(\"../fonts/227de6ba-fef9-435d-8693-a53a76aa1add.eot?#iefix\");\n  src:url(\"../fonts/227de6ba-fef9-435d-8693-a53a76aa1add.eot?#iefix\") format(\"eot\"),url(\"../fonts/dae937ec-159f-4710-9b2d-9470e24807ba.woff2\") format(\"woff2\"),url(\"../fonts/c8856bf2-4d23-4e30-9fb1-eede15b787b6.woff\") format(\"woff\"),url(\"../fonts/376f433f-1486-4168-932f-06352c8291f8.ttf\") format(\"truetype\");\n}\n\nbody {\n  font-family: $font-avenirnext;\n}\n\n.font-mercury {\n  font-family: $font-mercury;\n}\n\n.font-avenirnext {\n  font-family: $font-avenirnext;\n}\n\n.font-surveyor {\n  font-family: $font-surveyor;\n}\n\n.font-tradegothic {\n  font-family: $font-tradegothic;\n}\n","// Font Shortcuts\n// Mercury Display (from typography.com) NB: limited weights and styles provided, see typography.com project dashboard\n$font-mercury: 'Mercury Display A', 'Mercury Display B', serif;\n\n// Surveyor Display (from typography.com)  NB: limited weights and styles provided, see typography.com project dashboard\n$font-surveyor: \"Surveyor Display A\", \"Surveyor Display B\", serif;\n\n\n// Avenir Next styles (from fonts.com)\n$font-avenirnext: 'AvenirNextLT', sans-serif;\n\n//TODO: These do not appear to be implemented. If needed as separate fonts\n//they should be correctly named in _fonts.scss\n//$font-avenirnext__italic: 'AvenirNextLTW01-Italic', sans-serif;\n//$font-avenirnext__medium: 'AvenirNextLTW01-Medium', sans-serif;\n//$font-avenirnext__bold: 'Avenir Next LT W01 Bold', sans-serif;\n//$font-avenirnext__boldita: 'AvenirNextLTW01-BoldIta', sans-serif;\n\n// Trade Gothic styles (from fonts.com)\n$font-tradegothic: 'TradeGothicCond', sans-serif;\n//$font-tradegothic__bold: 'TradeGothic Next LT W01 Bd Cn', sans-serif;\n\n// Width of the central column\n$global-width: 72rem;\n\n// All variables prefixed with \"rr\" are used to\n// set defaults for the root-rhythm sass module.\n$rr-max-width: $global-width;\n\n// 1 rem is divided into this many segments to\n// make a grid square. at 2, that means each\n// grid is .5rem x .5rem.\n$rr-grid-divisions: 2;\n\n// These grid settings configure the grid at\n// different breakpoints and also specify the\n// breaks used by rr-break-directive() -- the\n// sass mixin that creates media queries.\n//\n// \"Grid\" here means a typographic / layout\n// grid, not CSS3 Grids.\n//\n// rr-break-directive is the preferred method\n// for making breakpoints; a close alternative\n// is looking the breakpoint values up here.\n// If necessary you can write one manually,\n// but then those will need to be found and\n// tweaked by hand if there are revisions.\n$rr-grid-settings: (\n  s: (\n    mq: max-width,\n    size: 35rem,\n    columns: 4,\n    gutter: 1rem / $rr-grid-divisions,\n    offset: 1rem,\n    vspace: 2,\n    column_color: rgba(200, 200, 255, .2),\n    baseline_color: rgba(128, 128, 200, .2)\n  ),\n  m: (\n    mq: min-width,\n    size: 35rem,\n    gutter: 1rem,\n    columns: 8,\n    offset: 2rem,\n    vspace: 3, //  21px / 42px\n    column_color: rgba(255, 200, 200, .2),\n    baseline_color: rgba(128, 128, 200, .2)\n  ),\n  l: (\n    size: 58rem,\n    columns: 12,\n    column_color: rgba(128, 255, 200, .2),\n    baseline_color: rgba(128, 128, 200, .2)\n  ),\n  xl: (\n    size: $global-width + 4rem,\n    offset: 0,\n    gutter: 2rem, //36px\n    vspace: 5, // (36px / 72px)\n    column_color: rgba(200, 128, 255, .2),\n    baseline_color: rgba(128, 128, 200, .2)\n  ),\n  xlp: (\n    size: $global-width + 8rem\n  )\n);\n\n// This configures the CSS3 grid layout as well\n// as the flex fallbacks for IE11. Configuration\n// is provided through 6-up, but 3-up is the most\n// content-friendly maxium.\n//\n// The m/l/xl breakpoints match the breakpoints\n// in rr-grid-settings above, and control\n// layout at those breakpoints.\n//\n// You can add new configurations just by following\n// the pattern below.\n$rr-grids: (\n  2-up: (\n    m: (\n      columns: 2,\n    )\n  ),\n  3-up: (\n    //m: (\n    //  columns: 2,\n    //),\n    l: (\n      columns: 3,\n    )\n  ),\n  4-up: (\n    m: (\n      columns: 2,\n    ),\n    l: (\n      columns: 4,\n    )\n  ),\n  5-up: (\n    m: (\n      columns: 3,\n    ),\n    l: (\n      columns: 5,\n    )\n  ),\n  6-up: (\n    m: (\n      columns: 3,\n    ),\n    l: (\n      columns: 4,\n    ),\n    xl: (\n      columns: 6\n    )\n  ),\n  sidebar-left: (\n    m: (\n      columns: 3,\n      areas: side main main,\n      flex-areas: (\n        side: 33.3%,\n        main: 66.6%\n      )\n    ),\n    l: (\n      columns: 4,\n      areas: side main main main,\n      flex-areas: (\n        side: 25%,\n        main: 75%\n      )\n    )\n  ),\n  sidebar-right: (\n    m: (\n      columns: 3,\n      areas: main main side,\n      flex-columns: 2,\n      flex-areas: (\n        side: 33.3%,\n        main: 66.6%\n      )\n    ),\n    l: (\n      columns: 4,\n      areas: main main main side,\n      flex-areas: (\n        side: 25%,\n        main: 75%\n      )\n    )\n  ),\n  major-left: (\n    m: (\n      columns: 2,\n      areas: major minor,\n      flex-columns: 2,\n      flex-areas: (\n        minor: 33.3%,\n        major: 66.6%\n      )\n    ),\n    l: (\n      columns: 3,\n      areas: major major minor,\n      flex-areas: (\n        minor: 33.3%,\n        major: 66.6%\n      )\n    )\n  ),\n  major-right: (\n    m: (\n      columns: 2,\n      areas: minor major,\n      flex-columns: 2,\n      flex-areas: (\n        minor: 33.3%,\n        major: 66.6%\n      )\n    ),\n    l: (\n      columns: 3,\n      areas: minor major major,\n      flex-areas: (\n        minor: 33.3%,\n        major: 66.6%\n      )\n    ),\n  )\n);\n\n// Line heights in grid units. These are all\n// relative to the font size, so \"tight\" has a line\n// height that represents just enough space\n// to contain a line of font text, whereas \"redic\"\n// is pretty massive.\n//\n// rr-font-compute(size,lineheight) will provide\n// a font-size, line-height combination in rem,\n// along with the required media queries to ensure\n// font sizes change in a standardized fashion.\n//\n// It is preferable to using font size and line\n// height directly in the code.\n$lineheights: (\n  hpc: -2,\n  squeeze: -1,\n  tight: 0,\n  medium: 1,\n  wide: 2,\n  huge: 3,\n  redic: 4\n);\n\n// This map lets us specify font sizes by a name\n// rather than a specific value. You can create\n// new sizes by adding a new name. The font sizes\n// change based on breakpoint.\n\n// rr-font-compute(size,lineheight) will provide\n// a font-size, line-height combination in rem,\n// along with the required media queries to ensure\n// font sizes change in a standardized fashion.\n//\n// It is preferable to using font size and line\n// height directly in the code.\n$fonts: (\n  s: (\n    xs: .75rem,\n    s: .875rem,\n    r: 1rem,\n    l: 1.1667rem,\n    xl: 1.25rem,\n    2xl: 1.5rem,\n    3xl: 1.775rem,\n    4xl: 2rem,\n    5xl: 2.4286rem,\n    6xl: 4.5rem\n  ),\n  xl: (\n    xs: .75rem,\n    s: .875rem,\n    r: 1rem,\n    l: 1.1667rem,\n    xl: 1.25rem,\n    2xl: 1.5rem,\n    3xl: 1.875rem,\n    4xl: 2.375rem,\n    5xl: 3.4286rem,\n    6xl: 6.3rem\n  )\n);\n\n$font-sizes: rr-font-sizes();\n\n// Establish header sizes for the editorial\n// headings.\n$editorial-headings: (\n  h2: (\n    size: 4xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h3: (\n    size: 3xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h4: (\n    size: xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h5: (\n    size: xl,\n    lineheight: tight,\n    weight: normal,\n    style: italic\n  ),\n  h6: (\n    size: l,\n    lineheight: tight,\n    weight: normal\n  )\n);\n\n// This is the color palette. Colors should never be\n// referenced with literals. These names are preferred.\n//\n// color(key) will return the hex value here.\n//\n// Seriously, do not pollute the sass with color literals.\n// new colors: July 2019\n$colors: (\n  // primary\n  wildcat-blue: #0033a0,\n  wildcat-white: #fff,\n  // secondary\n  bluegrass: #0071eb,\n  sky: #B1C9E8,\n  midnight: #041E42,\n  goldenrod: #FFDC00,\n  sunset: #FFA360,\n  river-green: #4CBCC0,\n  // neutral\n  cool-neutral: #DCDDDE,\n  warm-neutral-20: #F9F9F5,\n  warm-neutral-60: #EFEBE2,\n  warm-neutral: #D6D2C4,\n  wildcat-black: #000000,\n  // old colors\n  light-blue: #1897d4,\n  medium-blue: #2b3a82,\n  dark-blue: #1f2c5e,\n  almost-wildcat-blue: #002678,\n  light-blue-tint: #a1d3ed,\n  light-blue-shade: #106693,\n  blue-black: #000500,\n  light-gray: #c8c8c7,\n  subtle-gray: #ebebeb,\n  barely-gray: #f4f4f5,\n  dark-gray: #515664,\n  blue-gray: #eff4fd,\n  success: #7cfc00,\n  warning: #ff8c00,\n  alert: #c12c2b,\n  info: #a1d3ed,\n);\n\n$gradients: (\n  dark-wildcat:(color(dark-blue), color(wildcat-blue))\n);\n// These are color schemes that map the colors above\n// to specific elements. In general we try to keep\n// css rules that specify color in the \"usescheme\"\n// mixin; this makes it easy to ensure that color\n// schemes remain consistent.\n//\n// $scheme-light is the default.\n//\n// You can create a new scheme by copying this\n// map and giving it a new name.\n//\n// color(key,scheme) will return the hex value\n// of the color in that space; typically you\n// do not use color(key,scheme) except in the\n// usescheme() mixin below.\n$scheme-light: (\n  link: color(wildcat-black),\n  link-active: color(wildcat-blue),\n  menu-icon-color: color(wildcat-blue),\n  menu-icon-color-active: color(wildcat-blue),\n  text: color(wildcat-black),\n  accent: color(sunset),\n  button-border: color(wildcat-blue),\n  button-background: color(wildcat-blue),\n  button-text: color(wildcat-white),\n  button-disabled-border: color(subtle-gray),\n  button-disabled-background: color(subtle-gray),\n  button-disabled-text: color(dark-gray),\n  button-hover-border: color(wildcat-blue),\n  button-hover-background: color(wildcat-white),\n  button-hover-text: color(wildcat-blue),\n  button-active-border: color(wildcat-blue),\n  button-active-background: color(wildcat-blue),\n  button-active-text: color(wildcat-white),\n  button-focus-border: color(bluegrass),\n  button-focus-background: color(wildcat-white),\n  button-focus-text: color(wildcat-blue),\n  headline-group-super: color(dark-gray),\n  headline-group-head: color(wildcat-black),\n  headline-group-sub: color(dark-gray),\n  media-citation: color(dark-gray),\n  carousel-single-button: color(dark-gray),\n  carousel-single-button-art: color(wildcat-white),\n  carousel-center-button: color(dark-gray),\n  carousel-center-button-art: color(wildcat-white),\n  carousel-dot: color(bluegrass),\n  carousel-dot-active: color(wildcat-black),\n  carousel-center-caption: color(wildcat-black),\n  media-background: color(wildcat-blue),\n  statistic-head-color: color(wildcat-blue),\n  statistic-subhead-color: color(bluegrass),\n  logo-color: color(wildcat-blue),\n  wordmark-color: color(wildcat-black),\n  dashed-border-color: rgba(#2c2a29, .3),\n  form-borders: color(cool-neutral)\n);\n\n// This scheme applies lighter colors to child elements,\n// and should be invoked by darker-background containing elements\n$scheme-dark: (\n  link: color(wildcat-white),\n  link-active: color(sky),\n  text: color(wildcat-white),\n  accent: color(river-green),\n  button-border: color(wildcat-white),\n  button-background: color(wildcat-white),\n  button-text: color(wildcat-blue),\n  button-disabled-border: rgba(#ededed, .66),\n  button-disabled-background: rgba(#ededed, .66),\n  button-disabled-text: color(wildcat-blue),\n  button-hover-border: color(wildcat-white),\n  button-hover-background: color(wildcat-blue),\n  button-hover-text: color(wildcat-white),\n  button-active-border: color(dark-blue),\n  button-active-background: color(cool-neutral),\n  button-active-text: color(wildcat-blue),\n  button-focus-border: color(wildcat-white),\n  button-focus-background: color(cool-neutral),\n  button-focus-text: color(wildcat-blue),\n  headline-group-super: color(cool-neutral),\n  headline-group-head: color(wildcat-white),\n  headline-group-sub: color(cool-neutral),\n  media-citation: color(wildcat-white),\n  carousel-single-button: color(dark-gray),\n  carousel-single-button-art: color(wildcat-white),\n  carousel-center-button: transparent,\n  carousel-center-button-art: color(wildcat-white),\n  carousel-dot: color(subtle-gray),\n  carousel-dot-active: color(sky),\n  carousel-center-caption: color(wildcat-black),\n  media-background: color(wildcat-black),\n  statistic-head-color: color(wildcat-white),\n  statistic-subhead-color: color(sky),\n  logo-color: color(wildcat-white),\n  wordmark-color: color(wildcat-white),\n  dashed-border-color: rgba(#fff, .3),\n  form-borders: transparent\n);\n\n\n// convenience aliases\n$white: color(wildcat-white);\n$black: color(wildcat-black);\n$color-text: color(text);\n$color-link: color(link);\n\n// Set rr defaults\n\n$rr-fonts: $fonts;\n$rr-lineheights: $lineheights;\n\n// This mixin generates all of the color CSS that\n// marries the color schemes above with CSS selectors.\n// This can generate a considerable amount of CSS,\n// so it's probably a good place for some reengineering\n// and refactoring. When I went down this road, I was\n// really only expecting to change colors for a handful\n// of items -- but by the end it had become pretty\n// elaborate.\n@mixin usescheme($textscheme) {\n  color: color(text, $textscheme);\n\n  .cite-media .icon-label {\n    color: color(media-citation, $textscheme);\n  }\n\n  .image-with-caption__media {\n    background-color: color(media-background, $textscheme);\n  }\n\n  .icon-label--stacked {\n    .label {\n      color: color(text, $textscheme);\n    }\n  }\n\n  a {\n    @include link-colors($d: color(link, $textscheme), $h: color(link-active, $textscheme));\n  }\n\n  .carousel figcaption a {\n    @include underline-link($d: color(link, $textscheme), $h: color(link-active, $textscheme), $w: 1px, $alpha: .6);\n    @include link-colors($d: color(link, $textscheme), $h: color(link, $textscheme));\n  }\n\n  button,\n  a.button,\n  input.button {\n    border-color: color(button-border, $textscheme);\n    background-color: color(button-background, $textscheme);\n    color: color(button-text, $textscheme);\n\n    // attach default colors to the anchor-as-button version\n    &:link {\n      border-color: color(button-border, $textscheme);\n      background-color: color(button-background, $textscheme);\n      color: color(button-text, $textscheme);\n    }\n\n    &.button--ghost {\n      background-color: transparent;\n      border-color: color(button-hover-border, $textscheme); //The background should be the 'opposite' of the border and text\n      color: color(button-hover-text, $textscheme);\n    }\n\n    &.button--bluegrass {\n      border-color: color(bluegrass);\n    }\n\n    &.button--transparent {\n      border-color: transparent;\n      background-color: transparent;\n      color: color(button-border, $textscheme);\n    }\n\n    &[disabled] {\n      // sass-lint:disable-block no-important\n      border-color: color(button-disabled-border, $textscheme) !important;\n      background-color: color(button-disabled-background, $textscheme) !important;\n      color: color(button-disabled-text, $textscheme) !important;\n\n      &.button--ghost {\n        background-color: transparent !important;\n        // The ghost disabled text is a weird case; we have to\n        // tune it for specific text schemes\n        @if $textscheme == $scheme-dark {\n          color: color(wildcat-white) !important;\n        } @else {\n          color: color(button-disabled-text, $textscheme) !important;\n        }\n      }\n    }\n\n    &:hover {\n      border-color: color(button-hover-border, $textscheme);\n      background-color: color(button-hover-background, $textscheme);\n      color: color(button-hover-text, $textscheme);\n\n      &.button--ghost {\n        background-color: color(button-background, $textscheme);\n        border-color: color(button-border, $textscheme);\n        color: color(button-text, $textscheme);\n      }\n    }\n\n    &:active,\n    &[aria-pressed='true'] {\n      border-color: color(button-active-border, $textscheme);\n      background-color: color(button-active-background, $textscheme);\n      color: color(button-active-text, $textscheme);\n\n      &.button--ghost {\n        color: color(button-active-text, $textscheme);\n      }\n\n      &.button--transparent {\n        border-color: transparent;\n        background-color: transparent;\n        color: color(button-active-border, $textscheme);\n      }\n    }\n\n    &:focus {\n      border-color: color(button-focus-border, $textscheme);\n      outline: none;\n      background-color: color(button-focus-background, $textscheme);\n      color: color(button-focus-text, $textscheme);\n\n      &.button--ghost {\n        background-color: transparent;\n        // Like disabled ghost, the focus state is quite different\n        // and we need some extra tuning\n        @if $textscheme == $scheme-dark {\n          color: color(wildcat-white);\n        } @else {\n          color: color(button-focus-text, $textscheme);\n        }\n      }\n    }\n  }\n\n  .headline-group .headline-group__super {\n    color: color(headline-group-super, $textscheme);\n  }\n\n  .headline-group .headline-group__sub {\n    color: color(headline-group-sub, $textscheme);\n  }\n\n  .headline-group .headline-group__head a {\n    color: color(headline-group-head, $textscheme);\n  }\n\n  .slick-prev,\n  .slick-next {\n    background-color: color(carousel-single-button, $textscheme);\n    color: #fff;\n\n    &:hover,\n    &:focus {\n      background-color: color(carousel-single-button, $textscheme);\n      color: #fff;\n    }\n\n    &::before {\n      color: color(carousel-single-button-art, $textscheme);\n    }\n  }\n\n  .slick-dots li {\n    button {\n      background-color: transparent;\n      color: color(wildcat-black);\n\n      &::before {\n        color: color(carousel-dot, $textscheme);\n      }\n    }\n\n    &.slick-active button::before {\n      color: color(carousel-dot-active, $textscheme);\n    }\n  }\n\n  .statistic {\n    .editorial {\n      &::before {\n        background-color: color(statistic-head-color, $textscheme);\n      }\n    }\n\n    .headline-group {\n      .headline-group__head {\n        color: color(statistic-head-color, $textscheme);\n      }\n\n      .headline-group__super,\n      .headline-group__sub {\n        color: color(statistic-subhead-color, $textscheme);\n      }\n    }\n  }\n\n  .pullquote__attribution {\n    &::before {\n      background-color: color(statistic-head-color, $textscheme);\n    }\n\n    .pullquote__first-line {\n      color: color(statistic-subhead-color, $textscheme);\n    }\n  }\n\n  .search-control {\n    background-color: transparent;\n    color: color(link, $textscheme);\n\n    &:hover,\n    &:active {\n      background-color: transparent;\n      color: color(link-active, $textscheme);\n    }\n  }\n\n  .menu-button {\n    background-color: transparent;\n    color: color(menu-icon-color, $textscheme);\n\n    &:hover,\n    &:active {\n      background-color: transparent;\n      color: color(menu-icon-color-active, $textscheme);\n    }\n  }\n\n  .uky-logo-main {\n    .uky-logo-main__logo {\n      fill: color(logo-color, $textscheme);\n    }\n\n    .uky-logo-main__wordmark {\n      fill: color(wordmark-color, $textscheme);\n    }\n  }\n\n  .contact-table {\n    th,\n    td {\n      border-color: color(dashed-border-color, $textscheme);\n    }\n  }\n\n  .social-media-links {\n    a {\n      &:link,\n      &:visited {\n        color: color(button-background, $textscheme);\n      }\n\n      &:hover,\n      &:active {\n        color: color(button-disabled-text, $textscheme);\n      }\n    }\n  }\n\n  form {\n    input[type='text'],\n    input[type='password'],\n    input[type='color'],\n    input[type='date'],\n    input[type='datetime'],\n    input[type='email'],\n    input[type='month'],\n    input[type='number'],\n    input[type='range'],\n    input[type='search'],\n    input[type='tel'],\n    input[type='time'],\n    input[type='url'],\n    input[type='week'],\n    textarea {\n      border-color: color(form-borders, $textscheme);\n    }\n  }\n}\n","//\n// This stylesheet is for styles you want to include only when displaying demo\n// styles for grids, animations, color swatches, etc.\n// These styles will not be your production CSS.\n//\n\n@import 'root-rhythm';\n@import 'includes/design-variables';\n@import 'includes/mixins/m_typography';\n@import 'includes/colors';\n@import 'includes/fonts';\n\n//sass-lint:disable no-ids\n#sg-patterns {\n  max-width: 100%;\n}\n//sass-lint:enable no-ids\n\n.demo-animate {\n  margin-bottom: 1em;\n  padding: 1em;\n  border-radius: 8px;\n  background: color(dark-gray);\n  text-align: center;\n  cursor: pointer;\n}\n\n.sg-colors {\n  margin-left: 0;\n  list-style: none;\n  @include css-grid-columns(map-get($rr-grids, 4-up));\n}\n\n.sg-colors__column {\n  padding: rr-grid-remainder(2px);\n  border: 2px solid color(light-gray);\n  border-radius: 8px;\n  overflow: hidden;\n  @include rr-font-compute(r, tight);\n\n  margin {\n    top: rr-gridbase(2);\n    bottom: rr-gridbase(2);\n  }\n}\n\n.sg-colors pre {\n  @include rr-font-compute(xs, tight);\n  margin-bottom: rr-gridbase();\n}\n\n.sg-swatch {\n  display: block;\n  height: rr-gridbase(10);\n  margin-bottom: rr-gridbase();\n  padding: rr-grid-remainder(5px);\n  border-radius: 5px;\n}\n\n.sg-pattern-example {\n  overflow: hidden;\n}\n\n.sg-pattern {\n  margin-bottom: rr-gridbase(4);\n}\n\n.sg-pattern-head {\n  @include rr-font-compute(r);\n  padding: rr-gridbase();\n}\n\n.sg-pattern-title {\n  padding {\n    top: rr-gridbase(2);\n    bottom: rr-gridbase(2);\n  }\n\n  a {\n    padding: 0;\n    border-bottom-width: 0;\n  }\n}\n\n.sg-pattern-extra {\n  display: none;\n}\n\n.sg-image-grid {\n  .sg-image-grid-tile {\n    margin-bottom: 2rem;\n  }\n\n  @media screen and ( min-width: 44rem ) {\n    display: flex;\n    margin-right: -1rem;\n    margin-left: -1rem;\n\n    .sg-image-grid-tile {\n      margin-right: 1rem;\n      margin-bottom: 0;\n      margin-left: 1rem;\n    }\n  }\n}\n\nbody.layout-grid--on {\n  @include rr-grid-overlay;\n}\n\n.toggleGroup {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  z-index: 999;\n\n  button {\n    display: inline-block;\n\n    padding: 2px 8px;\n    border-radius: 8px;\n    border-color: color(wildcat-black);\n    background-color: color(wildcat-black);\n    font-size: 12px;\n    font-weight: bold;\n    line-height: 1;\n  }\n}\n\n.twig-include {\n  position: relative;\n}\n\n.twig-include__label {\n  display: none;\n\n  position: absolute;\n  top: 0;\n  right: 1rem;\n  color: color(alert);\n  z-index: 998;\n}\n\nbody.twig-includes--on {\n  .twig-include {\n    border: 2px solid color(alert);\n  }\n\n  .twig-include__label {\n    display: block;\n  }\n}\n","// Creates a slab for a slab layout. \n// Layout options are provided in other mixins\n// All options are driven by the global configuration\n// Slabs bring their own padding to the party which \n// we will override in some special circumstances.\n@mixin rr-slab {\n  $breaks: rr-breakpoint-list();\n  @each $break in $breaks {\n    $vspace: rr-gridbase(rr-prop-for-breakpoint($break, vspace));\n    @if $break == nth($breaks, 1) {\n      padding: $vspace rr-prop-for-breakpoint($break, offset);\n    } @else {\n      @include rr-break-directive($break) {\n        padding: $vspace rr-prop-for-breakpoint($break, offset);\n      }\n    }\n  }\n}\n\n// This creates a slab wrapper constrained to the main content width\n@mixin rr-slab-wrapper($margins: false) {\n  max-width: $rr-maxwidth;\n  margin: 0 auto;\n  @if not $margins {\n\n    // Get rid of top margins on the first child,\n    // bottom margins on the second so those\n    // margins don't pop out of the wrapper.\n    > :first-child {\n      margin-top: 0;\n    }\n\n    > :last-child {\n      margin-bottom: 0;\n    }\n  }\n}\n\n// This creates a full-bleed slab wrapper\n@mixin rr-slab-full-fullbleed {\n  max-width: none;\n  margin: 0;\n\n  > :first-child {\n    margin-top: 0;\n  }\n\n  > :last-child {\n    margin-bottom: 0;\n  }\n}\n\n// Pass this a list of class names (without the '.' prefix) and \n// adjacency classes that collapse padding between the \n@mixin rr-slab-adjacency($style-list) {\n  @each $style in $style-list {\n    .#{$style}+.#{$style} {\n      padding-top: 0;\n    }\n  }\n}\n\n@function rr-columns-for-template($template, $break) {\n  @if map-has-key($template, $break) {\n    $break-template: map-get($template, $break);\n    @if map-has-key($break-template, columns) {\n      @return map-get($break-template, columns);\n    }\n  }\n  @return null;\n}\n\n@function rr-areas-for-template($template, $break) {\n  @if map-has-key($template, $break) {\n    $break-template: map-get($template, $break);\n    @if map-has-key($break-template, areas) {\n      @return map-get($break-template, areas);\n    }\n  }\n  @return null;\n}\n\n@function rr-flex-areas-for-template($template, $break) {\n  @if map-has-key($template, $break) {\n    $break-template: map-get($template, $break);\n    @if map-has-key($break-template, flex-areas) {\n      @return map-get($break-template, flex-areas);\n    }\n  }\n  @return null;\n}\n\n@function rr-flex-columns-for-template($template, $break) {\n  @if map-has-key($template, $break) {\n    $break-template: map-get($template, $break);\n    @if map-has-key($break-template, flex-columns) {\n      @return map-get($break-template, flex-columns);\n    }\n  }\n  @return null;\n}\n\n// Code below is by Jesse Janowiak of NewCity; currently \n// working on integrating it with the existing code.\n// CSS GRID MIXINS\n//  `css-grid-columns( $count, $gutter, $gutter-s, $class-prefix, $breakpoint, $rr-support-ie)`\n//  `content-width( $count, $class-prefix, $breakpoint, $rr-support-ie )`\n//  `reverse-grid-columns( $count, $class-prefix, $breakpoint, $rr-support-ie )`\n// DEPENDENCIES\n// These mixins currently rely on Zurb's Foundation 6 for Sites Sass libraries,\n// specifically the `breakpoint` mixin and breakpoint values set in `foundation-settings`\n// SHARED VARIABLES\n$global-width: $rr-maxwidth !default;\n// `css-grid-columns` mixin\n// Builds a basic multi-column layout using pure CSS Grid.\n// Best used with content that divides evenly into full rows of the specified column count.\n//\n// Supports the following settings:\n//\n// $count:         The number of columns each row; defaults to 3\n// $gutter:        The space between columns; defaults to Foundation's\n//                 global $grid-column-gutter.\n//                 NOTE: Row gaps are not supported in IE. In this mixin, they are simulated\n//                 with bottom margins when the layout switches to single column.\n//                 If `$rr-support-ie` is disabled, `$gutter` can be either a single value applied\n//                 to both row and column gutters, or two values of the format\n//                 `row-gutter column-gutter`\n// $gutter-s:      If your grid breakpoint is set to 'small' so that the layout remains columned even\n//                 at the smallest breakpoint, you may want to use a narrower column gutter at that breakpoint.\n//                 Set the small gutter value here.\n// $class-prefix:  By default, all styles applied to child columns will be applied to the class\n//                 `&__column`. If you want to use a different prefix for columns than for the parent\n//                  class, set this value. DO include the leading `.`\n// $breakpoint:    The breakpoint above which the layout switches from a single column to\n//                 the specified column count. Accepts a predefined breakpoint\n//                 definition (e.g. 'medium') or a unitless pixel width.\n//                 Requires Foundation's `breakpoint` mixin or another breakpoint mixin\n//                 with the same syntax.\n// $reverse:       Applies the `reverse-grid-columns` mixin instead of the standard column placement.\n// $rr-support-ie:    If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                 This results in cleaner stylesheet code if you don't need to support those\n//                 browsers.\n//\n// Required html markup (if this mixin is applied to a class called `.row-container`):\n// <div class=\"row-container\">\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n// </div>\n@mixin css-grid-columns($templates, $config: $rr-grid-settings, $class-prefix: null, $reverse: false) {\n  $medium-size: rr-prop-for-breakpoint(m, size);\n  @if not $class-prefix {\n    $class-prefix: #{&};\n  }\n\n  $breaks: rr-breakpoint-list();\n  $flex-initialized: false;\n\n  #{$class-prefix}__column {\n    margin-bottom: rr-gridbase(2);\n    box-sizing: border-box;\n  }\n  @each $break in $breaks {\n    $num-columns: rr-columns-for-template($templates, $break);\n    $grid-gap: rr-prop-for-breakpoint($break, gutter);\n    $grid-areas: rr-areas-for-template($templates, $break);\n    $flex-areas: rr-flex-areas-for-template($templates, $break);\n    @include rr-break-directive($break) {\n      @if $num-columns {\n        $width: percentage(1 / $num-columns);\n        @if (not $flex-initialized) {\n          display: flex;\n          flex-wrap: wrap;\n          align-items: stretch;\n          justify-content: space-between;\n          $flex-initialized: true;\n        }\n        @if (not $flex-areas) {\n          #{$class-prefix}__column {\n            flex: 0 1 auto;\n            width: calc(#{$width} - #{$grid-gap});\n            @if $grid-gap {\n              margin: 0 0 ($grid-gap * 2);\n            }\n          }\n        }\n      }\n      @if $flex-areas {\n        @each $area,\n        $width in $flex-areas {\n          // try https://hugogiraudel.com/2014/01/27/casting-types-in-sass/\n          #{$class-prefix}__column--#{$area} {\n            flex: 0 1 auto;\n            width: calc(#{$width} - #{$grid-gap});\n          }\n        }\n      }\n    }\n  }\n  @supports ( grid-template-columns: 1px) {\n    display: grid;\n\n    #{$class-prefix}__column {\n      width: auto;\n      margin: 0;\n    }\n    @each $break in $breaks {\n      $num-columns: rr-columns-for-template($templates, $break);\n      $grid-gap: rr-strict-prop-for-breakpoint($break, gutter);\n      $grid-areas: rr-areas-for-template($templates, $break);\n      grid-auto-rows: auto;\n      @if $num-columns or $grid-gap {\n        @include rr-break-directive($break) {\n          @if $grid-gap {\n            grid-gap: rr-prop-for-breakpoint($break, gutter);\n          }\n          @if $num-columns {\n            grid-template-columns: repeat(#{$num-columns}, minmax(0, 1fr));\n          }\n          @if $grid-areas {\n            grid-template-areas: '#{$grid-areas}';\n          }\n        }\n      }\n    }\n  }\n}\n\n\n// `reverse-grid-columns` mixin\n//  Changes the column order of a row created with the `css-grid-columns` from left-to-right\n//  to right-to-left. It can be set as the default layout for a specific class by passing `$reverse: true`\n//  to `css-grid-columns`, or it can be used as a stand-alone mixin for reversing the columns of\n//  an existing grid layout.\n//  NOTE: If applied to a row that is already right-to-left, this mixin will NOT switch it back to\n//        left-to-right. It only works in one direction.\n//\n// Supports the following settings:\n//\n// $count:         The number of columns each row; defaults to 3\n// $class-prefix:  By default, all styles applied to child columns will be applied to the class\n//                 `&__column`. If you want to use a different prefix for columns than for the parent\n//                  class, set this value. DO include the leading `.`\n// $breakpoint:    The breakpoint above which the layout switches from a single column to\n//                 the specified column count. Accepts a predefined breakpoint\n//                 definition (e.g. 'medium') or a unitless pixel width.\n//                 Requires Foundation's `breakpoint` mixin or another breakpoint mixin\n//                 with the same syntax.\n// $rr-support-ie:    If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                 This results in cleaner stylesheet code if you don't need to support those\n//                 browsers.\n@mixin reverse-grid-columns($count: 3, $class-prefix: '', $breakpoint: 'medium', $rr-support-ie: true) {\n  @if $class-prefix == '' {\n    $class-prefix: #{&};\n  }\n  $class-prefix: #{'.' + $class-prefix};\n\n  #{$class-prefix}__column {\n    $ms-columns: $count + $count - 1;\n    @for $i from 0 through $count - 1 {\n      @include breakpoint($breakpoint) {\n        &:nth-child(#{$i + 1}) {\n          -ms-grid-column: $ms-columns - (($i + 1) * 2 - 1) + 1;\n          @supports ( grid-column-start: 1) {\n            grid-column-start: $count - $i;\n            grid-row: 1;\n          }\n        }\n      }\n    }\n  }\n}\n\n// `content-width` mixin\n//  For the common use-case of a content column that needs to be restricted to a maximum width and centered\n//  horizontally in the viewport. Can optionally include a left and right gutter value so that a specific\n//  amount of vertical space is always reserved between the content and the viewport edges.\n//\n//  Supports the following settings:\n//\n//  $max-width:          The maximum width of the content inside this container\n//  $gutter:             Minimum distance between the content and the left and right viewport edges.\n//                       Defaults to the `$gutter-medium` value set above or inherited from another settings file.\n//  $container-selector: Selector for the content area. Defaults to `&__container`. DO include the leading `.`\n//  $rr-support-ie:         If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                       This results in cleaner stylesheet code if you don't need to support those\n//                       browsers.\n//\n// Required html markup (if this mixin is applied to a class called `.slab` and `$container-selector` is not set):\n// <div class=\"slab\">\n//    <div class=\"slab__container\">\n//      Constrained Content Area\n//    </div>\n// </div>\n@mixin content-width($max-width: $global-width, $gutter: false, $container-selector: '', $rr-support-ie: true) {\n  @if ( $gutter == false) {\n    $gutter: $gutter-medium;\n  }\n  @if ( $container-selector == '') {\n    $container-selector: '#{&}__container';\n  }\n  @if ( $rr-support-ie) {\n    display: -ms-grid;\n    -ms-grid-columns: minmax($gutter, 1fr) minmax(0, $max-width) minmax($gutter, 1fr);\n    -ms-grid-rows: auto;\n\n    #{$container-selector} {\n      -ms-grid-column: 2;\n      grid-column: 2;\n      -ms-grid-column-span: 1;\n      -ms-grid-row: auto;\n      grid-row: auto;\n    }\n  }\n  @supports ( grid-template-columns: 1px) {\n    display: grid;\n    grid-template-columns: [left-margin] minmax($gutter, 1fr) [content-column] minmax(0, $max-width) [right-margin] minmax($gutter, 1fr) [viewport-end];\n\n    #{$container-selector} {\n      grid-column-start: content-column;\n    }\n  }\n}\n","// Gets the list of breakpoints; very useful for walking\n// the configuration.\n@function rr-breakpoint-list($config: $rr-grid-settings) {\n  @return map-keys($config);\n}\n\n// Return a breakpoint configuration for the specified tag. \n// The tag is the first-level value in the `$rr-grid-settings` map.\n// This does not compute mobile-first cascade; you need to \n// use `$rr-combined-breakpoint` instead. \n@function rr-breakpoint($tag) {\n  $config: $rr-grid-settings;\n  @if map-has-key($config, $tag) {\n    @return map-get($config, $tag);\n  } @else {\n    @return map-get($config, nth(map-keys($config), 1));\n  }\n}\n\n@function rr-first-breakpoint($break, $config: $rr-grid-settings) {\n  $breaks: rr-breakpoint-list($config);\n  @return $break == nth($breaks, 1);\n}\n\n// Returns the first breakpoint config settings.\n// Remember maps are 1-indexed.\n@function rr-breakpoint-first() {\n  @return rr-breakpoint(nth(rr-breakpoint-list(), 1));\n}\n\n// Compute the size of a grid square, computed in the unit of the\n// line height. You can pass an optional multiplier.\n@function rr-gridbase($multiplier: 1) {\n  @return ($rr-line-height / $rr-grid-divisions) * $multiplier;\n}\n\n// deprecated\n@function rr-grid-units($steps) {\n  @return rr-gridbase($steps);\n}\n\n// Takes an offset value (like the width of a border) and a number of \n// grid steps; returns the size of the remaining grid step area.\n// Useful primarily for adding borders around things. \n@function rr-grid-remainder($offset, $steps: 1) {\n  $result: 0;\n  @if $steps < 1 {\n    $result: 0;\n  } @else {\n    $stepsize: rr-gridbase($steps);\n    @if comparable($offset, $stepsize) {\n      $result: $stepsize - $offset;\n    } @else {\n      $result: calc(#{$stepsize} - #{$offset});\n    }\n  }\n  @return $result;\n}\n\n// Convenience mixin for building breakpoints around the media queries. \n@mixin rr-break-directive($break, $config: $rr-grid-settings) {\n  @if rr-first-breakpoint($break, $config) {\n    // Base Breakpoint\n    @content;\n    // End base breakpoint\n  } @else {\n    $mq: rr-prop-for-breakpoint($break, mq);\n    $size: rr-prop-for-breakpoint($break, size);\n    @media screen and ($mq: $size) {\n      @content;\n    }\n  }\n}\n\n// Return a breakpoint configuration for the specified tag. \n// The tag is the first-level value in the `$rr-grid-settings` map. \n// Unlike `rr-breakpoint`, this will look up values from earlier \n// breakpoints. \n@function rr-combined-breakpoint($break: s) {\n  $breaks: rr-breakpoint-list();\n  $work-map: rr-breakpoint-first();\n  $stop: index($breaks, $break);\n  @if not $stop {\n    @return $work-map;\n  } // Bounds-check the stop\n  @if ($stop > 1) {\n    @for $i from 2 through $stop {\n      $tag: nth($breaks, $i);\n      $work-map: map-merge($work-map, rr-breakpoint($tag));\n    }\n  }\n  @return $work-map;\n}\n\n// Given a breakpoint tag and a property name, return the property value. \n// This looks for the property in the combined breakpoint.\n@function rr-prop-for-breakpoint($break, $prop) {\n  $bp: rr-combined-breakpoint($break);\n  @if map-has-key($bp, $prop) {\n    @return map-get($bp, $prop);\n  }\n  @return null;\n}\n\n// Given a breakpoint tag and a property name, return the property value. \n// This looks for the property only in the specified breakpoint.\n@function rr-strict-prop-for-breakpoint($break, $prop) {\n  $bp: rr-breakpoint($break);\n  @if map-has-key($bp, $prop) {\n    @return map-get($bp, $prop);\n  }\n  @return null;\n}\n","// Render the columns as a repeating linear gradient.\n@function rr-columns($break: s) {\n  $gutter: rr-prop-for-breakpoint($break, gutter);\n  $color: rr-prop-for-breakpoint($break, column_color);\n  $columns: rr-prop-for-breakpoint($break, columns);\n  $colwidth: 100% / $columns;\n  @if not $color {\n    $color: rgba(0, 0, 0, .5);\n  }\n  @return repeating-linear-gradient(to left, transparent 0, transparent $gutter, $color $gutter, $color $colwidth);\n}\n\n// Render the baselines as a simple linear gradient. This gradient has \n// small enough values that Safari goes batshit if you try to do it with a \n// repeating linear gradient. \n@function rr-baselines($break: s) {\n  $baseline: rr-gridbase();\n  $color: rr-prop-for-breakpoint($break, baseline_color);\n  @if not $color {\n    $color: rgba(0, 0, 0, .5);\n  }\n  @return linear-gradient(to top, #{$color} 0, #{$color} 1px, transparent 1px, transparent 100%);\n}\n\n// Pass a fontsize and how many grid-spaces of spacing you want around it,\n// and this will return font size and line-height declarations. Line-heights\n// are sent back with a unit (instead of unitless) in an attempt to keep \n// the grid a little more bullet-proof. \n//\n// If you want smaller line-height than the font size, you can pass negative \n// values.\n//\n// If you want a line height close to 1, make sure the font size is a multiple\n// of the grid base and `$steps` is 0.\n@mixin rr-font-line-height($fontsize, $steps: 0) {\n  // Our grid unit\n  $gridbase: rr-gridbase(); // Match to the font size\n  $container: ceil($fontsize / $gridbase) * $gridbase; // Add the offset value to the text\n  $leading: $steps * $gridbase;\n  font-size: $fontsize;\n  line-height: $container + $leading;\n}\n\n// Extract all the possible font sizes out of a font size config. \n// this is more complicated than your typical keywords() op because\n// font config is organized by breakpoint, then size.\n@function rr-font-sizes($font-config: $rr-fonts) {\n  $working-map: ();\n  @each $break, $fontmap in $font-config {\n    $working-map: map-merge($working-map, $fontmap);\n  }\n  @return map-keys($working-map);\n}\n\n// Pass a font tag and a lineheight tag and rr-font-config returns font size and\n// line height properties for each breakpoint.\n@mixin rr-font-compute($size: m, $lineheight: medium, $font-config: $rr-fonts, $lineheight-config: $rr-lineheights) {\n  $breaks: rr-breakpoint-list();\n  $linegridheight: map-get($lineheight-config, $lineheight);\n  @each $break in $breaks {\n    @if map-has-key($font-config, $break) {\n      $font-size-set: map-get($font-config, $break);\n      @if map-has-key($font-size-set, $size) {\n        @include rr-break-directive($break) {\n          $fontsize: map-get($font-size-set, $size);\n          @include rr-font-line-height($fontsize, $linegridheight);\n        }\n      }\n    }\n  }\n}\n\n// Builds a list of style rules with the specified prefix, size tag, and\n// lineheight tag. Useful for building pattern libraries or if you intend\n// to expose design capabilities through css.\n@mixin rr-font-samples($prefix: 'text', $font-config: $rr-fonts, $lineheight-config: $rr-lineheights) {\n  $font-sizes: rr-font-sizes($font-config);\n  @each $fs in $font-sizes {\n    @each $name, $size in $fs {\n      @each $linename, $lineheight in $lineheight-config {\n        .#{$prefix}-#{$name}-#{$linename} {\n          background-color: rgba(200, 255, 200, .3);\n          @include rr-font-compute($name, $linename);\n        }\n      }\n    }\n  }\n}\n\n// Builds basic heading layout using the heading style configuration, including\n// media queries.\n@mixin rr-heading($config-map-tag, $heading-config: $rr-headings) {\n  @if map-has-key($heading-config, $config-map-tag) {\n    $config: map-get($map: $heading-config, $key: $config-map-tag);\n    $size: m;\n    @if map-has-key($config, size) {\n      $size: map-get($config, size);\n    }\n    $lineheight: medium;\n    @if map-has-key($config, lineheight) {\n      $lineheight: map-get($config, lineheight);\n    }\n    @include rr-font-compute($size, $lineheight);\n    $font: sans-serif;\n    @if map-has-key($config, font) {\n      $font: map-get($config, font);\n    }\n    font-family: $font;\n    @if map-has-key($config, weight) {\n      font-weight: map-get($config, weight);\n    }\n    @if map-has-key($config, style) {\n      font-style: map-get($config, style);\n    }\n  }\n}\n\n// Add columns to a ::before pseudoelement, gridlines to an ::after pseudoelement.\n@mixin rr-grid-overlay {\n  &::before {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    max-width: $rr-maxwidth;\n    min-height: 100vh;\n    margin-right: auto;\n    margin-left: auto;\n    content: '';\n    z-index: 1000;\n    pointer-events: none;\n    mix-blend-mode: $rr-blend-mode;\n    $breaks: rr-breakpoint-list();\n    @each $break in $breaks {\n      $offset: rr-prop-for-breakpoint($break, offset);\n      $gutter: rr-prop-for-breakpoint($break, gutter);\n      $cols: rr-prop-for-breakpoint($break, columns);\n      @include rr-break-directive($break) {\n        @if $offset > 0 {\n          width: calc(100% - (2 * #{$offset}));\n        } @else {\n          width: 100%;\n        }\n        background-image: rr-columns($break);\n        background-size: calc(100% + #{$gutter});\n      }\n    }\n  }\n\n  &::after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    min-height: 100vh;\n    margin-right: auto;\n    margin-left: auto;\n    content: '';\n    z-index: 1000;\n    pointer-events: none;\n    mix-blend-mode: $rr-blend-mode;\n    $breaks: rr-breakpoint-list();\n    @each $break in $breaks {\n      @include rr-break-directive($break) {\n        background: transparent rr-baselines($break) scroll repeat left top / 100% rr-gridbase();\n      }\n    }\n  }\n}\n","// maximum content width\n// If you are going for a full fluid design, set this\n// value to 100%.\n$rr-maxwidth: 72rem !default;\n\n// Divisions of the base grid size.\n$rr-line-height: 1rem !default;\n\n// How many grid squares will fit in the default line\n// height. The larger this number is, the more options\n// you have but the more difficult it becomes to establish\n// a vertical rhythm.\n$rr-grid-divisions: 2 !default;\n\n// By default, the last breakpoint is set to `$rr-maxwidth`\n// + `$rr-maxwidth-margin` to prevent a case where the\n// max content width sits against left and right margins.// \n// If you are going for a full fluid design, set this value\n// to 0.\n$rr-maxwidth-margin: 4rem !default;\n\n// Blend mode for the grid/columns overlay. This might not\n// work on all browsers. (Looking at you, Edge.)\n$rr-blend-mode: exclusion !default;\n\n// IE support flag; should be `true` if you need to support\n// IE 11 and plan to use CSS grid layouts. (We do.)\n$rr-support-ie: true !default;\n\n// Default responsive settings, assuming a mobile-first\n// approach. The first breakpoint will be used as the \n// default settings outside of a media query. If you do\n// not redefine a setting in a larger breakpoint it \n// will inherit from one of the smaller breakpoints,\n// just as you would expect.\n\n$rr-grid-settings: (\n  s: (\n    mq: max-width,\n    size: 35rem,\n    columns: 4,\n    gutter: 1rem / $rr-grid-divisions,\n    offset: 1rem,\n    vspace: 2,\n    column_color: rgba(128, 128, 128, .2),\n    baseline_color: rgba(128, 128, 128, .2)\n  ),\n  m: (\n    mq: min-width,\n    size: 35rem,\n    columns: 8,\n    gutter: 1rem,\n    offset: 2rem,\n    vspace: 3\n  ),\n  l: (\n    size: 48rem,\n    columns: 12\n  ),\n  xl: (\n    size: $rr-maxwidth + 4rem,\n    gutter: 2rem,\n    offset: 0,\n    vspace: 4\n  )\n) !default;\n\n$rr-grids: (\n  2-up: (\n    m: (\n      columns: 2,\n    )\n  ),\n  3-up: (\n    m: (\n      columns: 3,\n    )\n  ),\n  4-up: (\n    m: (\n      columns: 2,\n    ),\n    l: (\n      columns: 4,\n    )\n  ),\n  5-up: (\n    m: (\n      columns: 3,\n    ),\n    l: (\n      columns: 5,\n    )\n  ),\n  6-up: (\n    m: (\n      columns: 3,\n    ),\n    l: (\n      columns: 6,\n    )\n  ),\n  sidebar-left: (\n    m: (\n      columns: 3,\n      areas: side main main,\n      flex-areas: (\n        article: 66.6%,\n        sidebar: 33.3%\n      )\n    ),\n    l: (\n      columns: 4,\n      areas: side main main main,\n      flex-areas: (\n        article: 75%,\n        sidebar: 25%\n      )\n    )\n  ),\n  sidebar-right: (\n    m: (\n      columns: 3,\n      areas: main main side,\n      flex-areas: (\n        article: 66.6%,\n        sidebar: 33.3%\n      )\n    ),\n    l: (\n      columns: 4,\n      areas: main main main side,\n      flex-areas: (\n        article: 75%,\n        sidebar: 25%\n      )\n    )\n  ),\n  major-left: (\n    m: (\n      columns: 2,\n      areas: major minor,\n    ),\n    l: (\n      columns: 3,\n      areas: major major minor,\n      flex-areas: (\n        major: 66.6%,\n        minor: 33.3%\n      )\n    )\n  ),\n  major-right: (\n    m: (\n      columns: 2,\n      areas: minor major,\n    ),\n    l: (\n      columns: 3,\n      areas: minor major major,\n      flex-areas: (\n        major: 66.6%,\n        minor: 33.3%\n      )\n    )\n  )\n) !default;\n\n$rr-fonts: (\n  s: (\n    xs: .75rem,\n    s: .875rem,\n    m: 1rem,\n    l: 1.125rem,\n    xl: 1.25rem,\n    2xl: 1.45rem,\n    3xl: 1.67rem,\n    4xl: 1.92rem,\n    5xl: 2.24rem\n  ),\n  l: (\n    2xl: 1.5rem,\n    3xl: 2.25rem,\n    4xl: 3rem,\n    5xl: 4.5rem\n  )\n) !default;\n\n$rr-headings: (\n  h1: (\n    size: 5xl,\n    lineheight: tight,\n    font: serif,\n    weight: normal\n  ),\n  h2: (\n    size: 4xl,\n    lineheight: tight,\n    font: serif,\n    weight: normal,\n  ),\n  h3: (\n    size: 3xl,\n    weight: normal,\n  ),\n  h4: (\n    size: 2xl,\n    weight: normal,\n  ),\n  h5: (\n    size: xl,\n    weight: normal,\n    style: italic\n  ),\n  h6: (\n    size: l,\n    weight: bold\n  )\n) !default;\n\n$rr-lineheights: (\n  tight: 0,\n  medium: 1,\n  wide: 2,\n  huge: 3,\n  redic: 4\n) !default;\n"]}