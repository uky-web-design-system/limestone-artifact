{"version":3,"sources":["project.scss","../../node_modules/root-rhythm/sass/_rr-baseline.scss","includes/_design-variables.scss","../../node_modules/root-rhythm/sass/_rr-util.scss"],"names":[],"mappings":"AAqBA;ECkBE,gBC6NS;ED5NT,kBAAkC;EDjBlC,mBAAkB,EACnB;EG4CG;IH/CJ;MCkBE,gBCyOS;MDxOT,kBAAkC,EDhBnC,EAAA;;AAED;EACE,0BE0SqB,EFzStB","file":"project.css","sourcesContent":["// susy is a grid layout tool. This is used when grid or flexbox choices aren't appropriate\n// sshttp: //oddbird.net/susy/\n@import 'susy';\n\n// mathsass exposes Javascript's Math class to sass. We are using a NewCity fork so we can provide trivial updates\n// https: //github.com/newcity/eyeglass-math/\n@import 'math';\n\n// mq is a sass/media-query library\n// https://github.com/sass-mq/sass-mq\n@import 'sass-mq';\n\n@import 'root-rhythm';\n@import 'includes/rem';\n@import 'includes/math';\n@import 'includes/colors';\n@import 'includes/variables';\n@import 'includes/mixins';\n\n@import 'includes/design-variables';\n\n:root {\n  @include rr-font-compute(r, tight);\n  position: relative;\n}\n\nbody {\n  background-color: color(wildcat-blue);\n}","// Render the columns as a repeating linear gradient.\n@function rr-columns($break: s) {\n  $gutter: rr-prop-for-breakpoint($break, gutter);\n  $color: rr-prop-for-breakpoint($break, column_color);\n  $columns: rr-prop-for-breakpoint($break, columns);\n  $colwidth: 100% / $columns;\n  @if not $color {\n    $color: rgba(0, 0, 0, .5);\n  }\n  @return repeating-linear-gradient(to left, transparent 0, transparent $gutter, $color $gutter, $color $colwidth);\n}\n\n// Render the baselines as a simple linear gradient. This gradient has \n// small enough values that Safari goes batshit if you try to do it with a \n// repeating linear gradient. \n@function rr-baselines($break: s) {\n  $baseline: rr-gridbase();\n  $color: rr-prop-for-breakpoint($break, baseline_color);\n  @if not $color {\n    $color: rgba(0, 0, 0, .5);\n  }\n  @return linear-gradient(to top, #{$color} 0, #{$color} 1px, transparent 1px, transparent 100%);\n}\n\n// Pass a fontsize and how many grid-spaces of spacing you want around it,\n// and this will return font size and line-height declarations. Line-heights\n// are sent back with a unit (instead of unitless) in an attempt to keep \n// the grid a little more bullet-proof. \n//\n// If you want smaller line-height than the font size, you can pass negative \n// values.\n//\n// If you want a line height close to 1, make sure the font size is a multiple\n// of the grid base and `$steps` is 0.\n@mixin rr-font-line-height($fontsize, $steps: 0) {\n  // Our grid unit\n  $gridbase: rr-gridbase(); // Match to the font size\n  $container: ceil($fontsize / $gridbase) * $gridbase; // Add the offset value to the text\n  $leading: $steps * $gridbase;\n  font-size: $fontsize;\n  line-height: $container + $leading;\n}\n\n// Extract all the possible font sizes out of a font size config. \n// this is more complicated than your typical keywords() op because\n// font config is organized by breakpoint, then size.\n@function rr-font-sizes($font-config: $rr-fonts) {\n  $working-map: ();\n  @each $break, $fontmap in $font-config {\n    $working-map: map-merge($working-map, $fontmap);\n  }\n  @return map-keys($working-map);\n}\n\n// Pass a font tag and a lineheight tag and rr-font-config returns font size and\n// line height properties for each breakpoint.\n@mixin rr-font-compute($size: m, $lineheight: medium, $font-config: $rr-fonts, $lineheight-config: $rr-lineheights) {\n  $breaks: rr-breakpoint-list();\n  $linegridheight: map-get($lineheight-config, $lineheight);\n  @each $break in $breaks {\n    @if map-has-key($font-config, $break) {\n      $font-size-set: map-get($font-config, $break);\n      @if map-has-key($font-size-set, $size) {\n        @include rr-break-directive($break) {\n          $fontsize: map-get($font-size-set, $size);\n          @include rr-font-line-height($fontsize, $linegridheight);\n        }\n      }\n    }\n  }\n}\n\n// Builds a list of style rules with the specified prefix, size tag, and\n// lineheight tag. Useful for building pattern libraries or if you intend\n// to expose design capabilities through css.\n@mixin rr-font-samples($prefix: 'text', $font-config: $rr-fonts, $lineheight-config: $rr-lineheights) {\n  $font-sizes: rr-font-sizes($font-config);\n  @each $fs in $font-sizes {\n    @each $name, $size in $fs {\n      @each $linename, $lineheight in $lineheight-config {\n        .#{$prefix}-#{$name}-#{$linename} {\n          background-color: rgba(200, 255, 200, .3);\n          @include rr-font-compute($name, $linename);\n        }\n      }\n    }\n  }\n}\n\n// Builds basic heading layout using the heading style configuration, including\n// media queries.\n@mixin rr-heading($config-map-tag, $heading-config: $rr-headings) {\n  @if map-has-key($heading-config, $config-map-tag) {\n    $config: map-get($map: $heading-config, $key: $config-map-tag);\n    $size: m;\n    @if map-has-key($config, size) {\n      $size: map-get($config, size);\n    }\n    $lineheight: medium;\n    @if map-has-key($config, lineheight) {\n      $lineheight: map-get($config, lineheight);\n    }\n    @include rr-font-compute($size, $lineheight);\n    $font: sans-serif;\n    @if map-has-key($config, font) {\n      $font: map-get($config, font);\n    }\n    font-family: $font;\n    @if map-has-key($config, weight) {\n      font-weight: map-get($config, weight);\n    }\n    @if map-has-key($config, style) {\n      font-style: map-get($config, style);\n    }\n  }\n}\n\n// Add columns to a ::before pseudoelement, gridlines to an ::after pseudoelement.\n@mixin rr-grid-overlay {\n  &::before {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    max-width: $rr-maxwidth;\n    min-height: 100vh;\n    margin-right: auto;\n    margin-left: auto;\n    content: '';\n    z-index: 1000;\n    pointer-events: none;\n    mix-blend-mode: $rr-blend-mode;\n    $breaks: rr-breakpoint-list();\n    @each $break in $breaks {\n      $offset: rr-prop-for-breakpoint($break, offset);\n      $gutter: rr-prop-for-breakpoint($break, gutter);\n      $cols: rr-prop-for-breakpoint($break, columns);\n      @include rr-break-directive($break) {\n        @if $offset > 0 {\n          width: calc(100% - (2 * #{$offset}));\n        } @else {\n          width: 100%;\n        }\n        background-image: rr-columns($break);\n        background-size: calc(100% + #{$gutter});\n      }\n    }\n  }\n\n  &::after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    min-height: 100vh;\n    margin-right: auto;\n    margin-left: auto;\n    content: '';\n    z-index: 1000;\n    pointer-events: none;\n    mix-blend-mode: $rr-blend-mode;\n    $breaks: rr-breakpoint-list();\n    @each $break in $breaks {\n      @include rr-break-directive($break) {\n        background: transparent rr-baselines($break) scroll repeat left top / 100% rr-gridbase();\n      }\n    }\n  }\n}\n","// Font Shortcuts\n// Mercury Display (from typography.com) NB: limited weights and styles provided, see typography.com project dashboard\n$font-mercury: 'Mercury Display A', 'Mercury Display B', serif;\n\n// Surveyor Display (from typography.com)  NB: limited weights and styles provided, see typography.com project dashboard\n$font-surveyor: \"Surveyor Display A\", \"Surveyor Display B\", serif;\n\n\n// Avenir Next styles (from fonts.com)\n$font-avenirnext: 'AvenirNextLT', sans-serif;\n\n//TODO: These do not appear to be implemented. If needed as separate fonts\n//they should be correctly named in _fonts.scss\n//$font-avenirnext__italic: 'AvenirNextLTW01-Italic', sans-serif;\n//$font-avenirnext__medium: 'AvenirNextLTW01-Medium', sans-serif;\n//$font-avenirnext__bold: 'Avenir Next LT W01 Bold', sans-serif;\n//$font-avenirnext__boldita: 'AvenirNextLTW01-BoldIta', sans-serif;\n\n// Trade Gothic styles (from fonts.com)\n$font-tradegothic: 'TradeGothicCond', sans-serif;\n//$font-tradegothic__bold: 'TradeGothic Next LT W01 Bd Cn', sans-serif;\n\n// Blackbike styles (generated from fontsquirrel.com)\n$font-blackbikeclean: 'blackbikeclean', serif;\n$font-blackbikerough: 'blackbikerough', serif;\n\n// Width of the central column\n$global-width: 72rem;\n\n// All variables prefixed with \"rr\" are used to\n// set defaults for the root-rhythm sass module.\n$rr-max-width: $global-width;\n\n// 1 rem is divided into this many segments to\n// make a grid square. at 2, that means each\n// grid is .5rem x .5rem.\n$rr-grid-divisions: 2;\n\n// These grid settings configure the grid at\n// different breakpoints and also specify the\n// breaks used by rr-break-directive() -- the\n// sass mixin that creates media queries.\n//\n// \"Grid\" here means a typographic / layout\n// grid, not CSS3 Grids.\n//\n// rr-break-directive is the preferred method\n// for making breakpoints; a close alternative\n// is looking the breakpoint values up here.\n// If necessary you can write one manually,\n// but then those will need to be found and\n// tweaked by hand if there are revisions.\n$rr-grid-settings: (\n  s: (\n    mq: max-width,\n    size: 35rem,\n    columns: 4,\n    gutter: 1rem / $rr-grid-divisions,\n    offset: 1rem,\n    vspace: 2,\n    column_color: rgba(200, 200, 255, .2),\n    baseline_color: rgba(128, 128, 200, .2)\n  ),\n  m: (\n    mq: min-width,\n    size: 35rem,\n    gutter: 1rem,\n    columns: 8,\n    offset: 2rem,\n    vspace: 3, //  21px / 42px\n    column_color: rgba(255, 200, 200, .2),\n    baseline_color: rgba(128, 128, 200, .2)\n  ),\n  l: (\n    size: 58rem,\n    columns: 12,\n    column_color: rgba(128, 255, 200, .2),\n    baseline_color: rgba(128, 128, 200, .2)\n  ),\n  xl: (\n    size: $global-width + 4rem,\n    offset: 0,\n    gutter: 2rem, //36px\n    vspace: 5, // (36px / 72px)\n    column_color: rgba(200, 128, 255, .2),\n    baseline_color: rgba(128, 128, 200, .2)\n  ),\n  xlp: (\n    size: $global-width + 8rem\n  )\n);\n\n// This configures the CSS3 grid layout as well\n// as the flex fallbacks for IE11. Configuration\n// is provided through 6-up, but 3-up is the most\n// content-friendly maxium.\n//\n// The m/l/xl breakpoints match the breakpoints\n// in rr-grid-settings above, and control\n// layout at those breakpoints.\n//\n// You can add new configurations just by following\n// the pattern below.\n$rr-grids: (\n  2-up: (\n    m: (\n      columns: 2,\n    )\n  ),\n  3-up: (\n    //m: (\n    //  columns: 2,\n    //),\n    l: (\n      columns: 3,\n    )\n  ),\n  4-up: (\n    m: (\n      columns: 2,\n    ),\n    l: (\n      columns: 4,\n    )\n  ),\n  5-up: (\n    m: (\n      columns: 3,\n    ),\n    l: (\n      columns: 5,\n    )\n  ),\n  6-up: (\n    m: (\n      columns: 3,\n    ),\n    l: (\n      columns: 4,\n    ),\n    xl: (\n      columns: 6\n    )\n  ),\n  sidebar-left: (\n    m: (\n      columns: 3,\n      areas: side main main,\n      flex-areas: (\n        side: 33.3%,\n        main: 66.6%\n      )\n    ),\n    l: (\n      columns: 4,\n      areas: side main main main,\n      flex-areas: (\n        side: 25%,\n        main: 75%\n      )\n    )\n  ),\n  sidebar-right: (\n    m: (\n      columns: 3,\n      areas: main main side,\n      flex-columns: 2,\n      flex-areas: (\n        side: 33.3%,\n        main: 66.6%\n      )\n    ),\n    l: (\n      columns: 4,\n      areas: main main main side,\n      flex-areas: (\n        side: 25%,\n        main: 75%\n      )\n    )\n  ),\n  major-left: (\n    m: (\n      columns: 2,\n      areas: major minor,\n      flex-columns: 2,\n      flex-areas: (\n        minor: 33.3%,\n        major: 66.6%\n      )\n    ),\n    l: (\n      columns: 3,\n      areas: major major minor,\n      flex-areas: (\n        minor: 33.3%,\n        major: 66.6%\n      )\n    )\n  ),\n  major-right: (\n    m: (\n      columns: 2,\n      areas: minor major,\n      flex-columns: 2,\n      flex-areas: (\n        minor: 33.3%,\n        major: 66.6%\n      )\n    ),\n    l: (\n      columns: 3,\n      areas: minor major major,\n      flex-areas: (\n        minor: 33.3%,\n        major: 66.6%\n      )\n    ),\n  )\n);\n\n// Line heights in grid units. These are all\n// relative to the font size, so \"tight\" has a line\n// height that represents just enough space\n// to contain a line of font text, whereas \"redic\"\n// is pretty massive.\n//\n// rr-font-compute(size,lineheight) will provide\n// a font-size, line-height combination in rem,\n// along with the required media queries to ensure\n// font sizes change in a standardized fashion.\n//\n// It is preferable to using font size and line\n// height directly in the code.\n$lineheights: (\n  hpc: -2,\n  squeeze: -1,\n  tight: 0,\n  medium: 1,\n  wide: 2,\n  huge: 3,\n  redic: 4\n);\n\n// This map lets us specify font sizes by a name\n// rather than a specific value. You can create\n// new sizes by adding a new name. The font sizes\n// change based on breakpoint.\n\n// rr-font-compute(size,lineheight) will provide\n// a font-size, line-height combination in rem,\n// along with the required media queries to ensure\n// font sizes change in a standardized fashion.\n//\n// It is preferable to using font size and line\n// height directly in the code.\n$fonts: (\n  s: (\n    xs: .75rem,\n    s: .875rem,\n    r: 1rem,\n    l: 1.1667rem,\n    xl: 1.25rem,\n    2xl: 1.5rem,\n    3xl: 1.775rem,\n    4xl: 2rem,\n    5xl: 2.4286rem,\n    6xl: 4.5rem\n  ),\n  xl: (\n    xs: .75rem,\n    s: .875rem,\n    r: 1rem,\n    l: 1.1667rem,\n    xl: 1.25rem,\n    2xl: 1.5rem,\n    3xl: 1.875rem,\n    4xl: 2.375rem,\n    5xl: 3.4286rem,\n    6xl: 6.3rem\n  )\n);\n\n$font-sizes: rr-font-sizes();\n\n// Establish header sizes for the editorial\n// headings.\n$editorial-headings: (\n  h2: (\n    size: 4xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h3: (\n    size: 3xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h4: (\n    size: xl,\n    lineheight: tight,\n    weight: normal,\n  ),\n  h5: (\n    size: xl,\n    lineheight: tight,\n    weight: normal,\n    style: italic\n  ),\n  h6: (\n    size: l,\n    lineheight: tight,\n    weight: normal\n  )\n);\n\n// This is the color palette. Colors should never be\n// referenced with literals. These names are preferred.\n//\n// color(key) will return the hex value here.\n//\n// Seriously, do not pollute the sass with color literals.\n// new colors: July 2019\n$colors: (\n  // primary\n  wildcat-blue: #0033a0,\n  wildcat-white: #fff,\n  // secondary\n  bluegrass: #0071eb,\n  sky: #B1C9E8,\n  midnight: #041E42,\n  goldenrod: #FFDC00,\n  sunset: #FFA360,\n  river-green: #4CBCC0,\n  // neutral\n  cool-neutral: #DCDDDE,\n  warm-neutral-20: #F9F9F5,\n  warm-neutral-60: #EFEBE2,\n  warm-neutral: #D6D2C4,\n  wildcat-black: #000000,\n  // old colors\n  light-blue: #1897d4,\n  medium-blue: #2b3a82,\n  dark-blue: #1f2c5e,\n  almost-wildcat-blue: #002678,\n  light-blue-tint: #a1d3ed,\n  light-blue-shade: #106693,\n  blue-black: #000500,\n  light-gray: #c8c8c7,\n  subtle-gray: #ebebeb,\n  barely-gray: #f4f4f5,\n  dark-gray: #515664,\n  blue-gray: #eff4fd,\n  success: #7cfc00,\n  warning: #ff8c00,\n  alert: #c12c2b,\n  info: #a1d3ed,\n);\n\n$gradients: (\n  dark-wildcat:(color(dark-blue), color(wildcat-blue))\n);\n// These are color schemes that map the colors above\n// to specific elements. In general we try to keep\n// css rules that specify color in the \"usescheme\"\n// mixin; this makes it easy to ensure that color\n// schemes remain consistent.\n//\n// $scheme-light is the default.\n//\n// You can create a new scheme by copying this\n// map and giving it a new name.\n//\n// color(key,scheme) will return the hex value\n// of the color in that space; typically you\n// do not use color(key,scheme) except in the\n// usescheme() mixin below.\n$scheme-light: (\n  scheme-name: 'scheme-light',\n  link: color(wildcat-black),\n  link-active: color(wildcat-blue),\n  menu-icon-color: color(wildcat-blue),\n  menu-icon-color-active: color(wildcat-blue),\n  text: color(wildcat-black),\n  accent: color(sunset),\n  button-border: color(wildcat-blue),\n  button-background: color(wildcat-blue),\n  button-text: color(wildcat-white),\n  button-disabled-border: color(subtle-gray),\n  button-disabled-background: color(subtle-gray),\n  button-disabled-text: color(dark-gray),\n  button-hover-border: color(wildcat-blue),\n  button-hover-background: color(wildcat-white),\n  button-hover-text: color(wildcat-blue),\n  button-active-border: color(wildcat-blue),\n  button-active-background: color(wildcat-blue),\n  button-active-text: color(wildcat-white),\n  button-focus-border: color(bluegrass),\n  button-focus-background: color(wildcat-white),\n  button-focus-text: color(wildcat-blue),\n  headline-group-super: color(dark-gray),\n  headline-group-head: color(wildcat-black),\n  headline-group-sub: color(dark-gray),\n  media-citation: color(dark-gray),\n  carousel-single-button: color(dark-gray),\n  carousel-single-button-art: color(wildcat-white),\n  carousel-center-button: color(dark-gray),\n  carousel-center-button-art: color(wildcat-white),\n  carousel-dot: color(bluegrass),\n  carousel-dot-active: color(wildcat-black),\n  carousel-center-caption: color(wildcat-black),\n  media-background: color(wildcat-blue),\n  statistic-head-color: color(wildcat-blue),\n  statistic-subhead-color: color(bluegrass),\n  logo-color: color(wildcat-blue),\n  wordmark-color: color(wildcat-black),\n  dashed-border-color: rgba(#2c2a29, .3),\n  form-borders: color(cool-neutral)\n);\n\n// This scheme applies lighter colors to child elements,\n// and should be invoked by darker-background containing elements\n$scheme-dark: (\n  scheme-name:'scheme-dark',\n  link: color(wildcat-white),\n  link-active: color(sky),\n  text: color(wildcat-white),\n  accent: color(river-green),\n  button-border: color(wildcat-white),\n  button-background: color(wildcat-white),\n  button-text: color(wildcat-blue),\n  button-disabled-border: rgba(#ededed, .66),\n  button-disabled-background: rgba(#ededed, .66),\n  button-disabled-text: color(wildcat-blue),\n  button-hover-border: color(wildcat-white),\n  button-hover-background: color(wildcat-blue),\n  button-hover-text: color(wildcat-white),\n  button-active-border: color(dark-blue),\n  button-active-background: color(cool-neutral),\n  button-active-text: color(wildcat-blue),\n  button-focus-border: color(wildcat-white),\n  button-focus-background: color(cool-neutral),\n  button-focus-text: color(wildcat-blue),\n  headline-group-super: color(cool-neutral),\n  headline-group-head: color(wildcat-white),\n  headline-group-sub: color(cool-neutral),\n  media-citation: color(wildcat-white),\n  carousel-single-button: color(dark-gray),\n  carousel-single-button-art: color(wildcat-white),\n  carousel-center-button: transparent,\n  carousel-center-button-art: color(wildcat-white),\n  carousel-dot: color(subtle-gray),\n  carousel-dot-active: color(sky),\n  carousel-center-caption: color(wildcat-black),\n  media-background: color(wildcat-black),\n  statistic-head-color: color(wildcat-white),\n  statistic-subhead-color: color(sky),\n  logo-color: color(wildcat-white),\n  wordmark-color: color(wildcat-white),\n  dashed-border-color: rgba(#fff, .3),\n  form-borders: transparent\n);\n\n\n// convenience aliases\n$white: color(wildcat-white);\n$black: color(wildcat-black);\n$color-text: color(text);\n$color-link: color(link);\n\n// Set rr defaults\n\n$rr-fonts: $fonts;\n$rr-lineheights: $lineheights;\n\n// This mixin generates all of the color CSS that\n// marries the color schemes above with CSS selectors.\n// This can generate a considerable amount of CSS,\n// so it's probably a good place for some reengineering\n// and refactoring. When I went down this road, I was\n// really only expecting to change colors for a handful\n// of items -- but by the end it had become pretty\n// elaborate.\n\n@import 'mixins';\n\n\n\n//@mixin usescheme($textscheme) {\n@mixin generatescheme($textscheme, $schemename) {\n  %#{$schemename}--generated {\n    color: color(text, $textscheme);\n    .cite-media .icon-label {\n      color: color(media-citation, $textscheme);\n    }\n\n    .image-with-caption__media {\n      background-color: color(media-background, $textscheme);\n    }\n\n    .icon-label--stacked {\n      .label {\n        color: color(text, $textscheme);\n      }\n    }\n\n    a {\n      @include link-colors($d: color(link, $textscheme), $h: color(link-active, $textscheme));\n    }\n\n    .carousel figcaption a {\n      //@include underline-link($d: color(link, $textscheme), $h: color(link-active, $textscheme), $w: 1px, $alpha: .6);\n      @include link-colors($d: color(link, $textscheme), $h: color(link, $textscheme));\n    }\n\n    button,\n    a.button,\n    input.button {\n      border-color: color(button-border, $textscheme);\n      background-color: color(button-background, $textscheme);\n      color: color(button-text, $textscheme);\n\n      // attach default colors to the anchor-as-button version\n      &:link {\n        border-color: color(button-border, $textscheme);\n        background-color: color(button-background, $textscheme);\n        color: color(button-text, $textscheme);\n      }\n\n      &.button--ghost {\n        background-color: transparent;\n        border-color: color(button-hover-border, $textscheme); //The background should be the 'opposite' of the border and text\n        color: color(button-hover-text, $textscheme);\n      }\n\n      &.button--bluegrass {\n        border-color: color(bluegrass);\n      }\n\n      &.button--transparent {\n        border-color: transparent;\n        background-color: transparent;\n        color: color(button-border, $textscheme);\n      }\n\n      &[disabled] {\n        // sass-lint:disable-block no-important\n        border-color: color(button-disabled-border, $textscheme) !important;\n        background-color: color(button-disabled-background, $textscheme) !important;\n        color: color(button-disabled-text, $textscheme) !important;\n\n        &.button--ghost {\n          background-color: transparent !important;\n          // The ghost disabled text is a weird case; we have to\n          // tune it for specific text schemes\n          @if $textscheme == $scheme-dark {\n            color: color(wildcat-white) !important;\n          } @else {\n            color: color(button-disabled-text, $textscheme) !important;\n          }\n        }\n      }\n\n      &:hover {\n        border-color: color(button-hover-border, $textscheme);\n        background-color: color(button-hover-background, $textscheme);\n        color: color(button-hover-text, $textscheme);\n\n        &.button--ghost {\n          background-color: color(button-background, $textscheme);\n          border-color: color(button-border, $textscheme);\n          color: color(button-text, $textscheme);\n        }\n      }\n\n      &:active,\n      &[aria-pressed='true'] {\n        border-color: color(button-active-border, $textscheme);\n        background-color: color(button-active-background, $textscheme);\n        color: color(button-active-text, $textscheme);\n\n        &.button--ghost {\n          color: color(button-active-text, $textscheme);\n        }\n\n        &.button--transparent {\n          border-color: transparent;\n          background-color: transparent;\n          color: color(button-active-border, $textscheme);\n        }\n      }\n\n      &:focus {\n        border-color: color(button-focus-border, $textscheme);\n        outline: none;\n        background-color: color(button-focus-background, $textscheme);\n        color: color(button-focus-text, $textscheme);\n\n        &.button--ghost {\n          background-color: transparent;\n          // Like disabled ghost, the focus state is quite different\n          // and we need some extra tuning\n          @if $textscheme == $scheme-dark {\n            color: color(wildcat-white);\n          } @else {\n            color: color(button-focus-text, $textscheme);\n          }\n        }\n      }\n    }\n\n    .headline-group .headline-group__super {\n      color: color(headline-group-super, $textscheme);\n    }\n\n    .headline-group .headline-group__sub {\n      color: color(headline-group-sub, $textscheme);\n    }\n\n    .headline-group .headline-group__head a {\n      color: color(headline-group-head, $textscheme);\n    }\n\n    .slick-prev,\n    .slick-next {\n      background-color: color(carousel-single-button, $textscheme);\n      color: #fff;\n\n      &:hover,\n      &:focus {\n        background-color: color(carousel-single-button, $textscheme);\n        color: #fff;\n      }\n\n      &::before {\n        color: color(carousel-single-button-art, $textscheme);\n      }\n    }\n\n    .slick-dots li {\n      button {\n        background-color: transparent;\n        color: color(wildcat-black);\n\n        &::before {\n          color: color(carousel-dot, $textscheme);\n        }\n      }\n\n      &.slick-active button::before {\n        color: color(carousel-dot-active, $textscheme);\n      }\n    }\n\n    .statistic {\n      .editorial {\n        &::before {\n          background-color: color(statistic-head-color, $textscheme);\n        }\n      }\n\n      .headline-group {\n        .headline-group__head {\n          color: color(statistic-head-color, $textscheme);\n        }\n\n        .headline-group__super,\n        .headline-group__sub {\n          color: color(statistic-subhead-color, $textscheme);\n        }\n      }\n    }\n\n    .pullquote__attribution {\n      &::before {\n        background-color: color(statistic-head-color, $textscheme);\n      }\n\n      .pullquote__first-line {\n        color: color(statistic-subhead-color, $textscheme);\n      }\n    }\n\n    .search-control {\n      background-color: transparent;\n      color: color(link, $textscheme);\n\n      &:hover,\n      &:active {\n        background-color: transparent;\n        color: color(link-active, $textscheme);\n      }\n    }\n\n    .menu-button {\n      background-color: transparent;\n      color: color(menu-icon-color, $textscheme);\n\n      &:hover,\n      &:active {\n        background-color: transparent;\n        color: color(menu-icon-color-active, $textscheme);\n      }\n    }\n\n    .uky-logo-main {\n      .uky-logo-main__logo {\n        fill: color(logo-color, $textscheme);\n      }\n\n      .uky-logo-main__wordmark {\n        fill: color(wordmark-color, $textscheme);\n      }\n    }\n\n    .contact-table {\n      th,\n      td {\n        border-color: color(dashed-border-color, $textscheme);\n      }\n    }\n\n    .social-media-links {\n      a {\n        &:link,\n        &:visited {\n          color: color(button-background, $textscheme);\n        }\n\n        &:hover,\n        &:active {\n          color: color(button-disabled-text, $textscheme);\n\n        }\n      }\n    }\n\n\n    form {\n      input[type='text'],\n      input[type='password'],\n      input[type='color'],\n      input[type='date'],\n      input[type='datetime'],\n      input[type='email'],\n      input[type='month'],\n      input[type='number'],\n      input[type='range'],\n      input[type='search'],\n      input[type='tel'],\n      input[type='time'],\n      input[type='url'],\n      input[type='week'],\n      textarea {\n        border-color: color(form-borders, $textscheme);\n      }\n    }\n    //}\n  }\n}\n\n\n@include generatescheme($scheme-dark, 'scheme-dark-');\n@include generatescheme($scheme-light, 'scheme-light-');\n\n@each $size, $settings in $rr-grid-settings {\n  @include rr-break-directive($size) {\n    @include generatescheme($scheme-dark, 'scheme-dark-#{$size}');\n    @include generatescheme($scheme-light, 'scheme-light-#{$size}');\n  }\n}\n\n@mixin usescheme($textscheme, $breakpoint: ''){\n    @extend %#{map_get($textscheme, 'scheme-name')}-#{$breakpoint}--generated;\n}\n\n","// Gets the list of breakpoints; very useful for walking\n// the configuration.\n@function rr-breakpoint-list($config: $rr-grid-settings) {\n  @return map-keys($config);\n}\n\n// Return a breakpoint configuration for the specified tag. \n// The tag is the first-level value in the `$rr-grid-settings` map.\n// This does not compute mobile-first cascade; you need to \n// use `$rr-combined-breakpoint` instead. \n@function rr-breakpoint($tag) {\n  $config: $rr-grid-settings;\n  @if map-has-key($config, $tag) {\n    @return map-get($config, $tag);\n  } @else {\n    @return map-get($config, nth(map-keys($config), 1));\n  }\n}\n\n@function rr-first-breakpoint($break, $config: $rr-grid-settings) {\n  $breaks: rr-breakpoint-list($config);\n  @return $break == nth($breaks, 1);\n}\n\n// Returns the first breakpoint config settings.\n// Remember maps are 1-indexed.\n@function rr-breakpoint-first() {\n  @return rr-breakpoint(nth(rr-breakpoint-list(), 1));\n}\n\n// Compute the size of a grid square, computed in the unit of the\n// line height. You can pass an optional multiplier.\n@function rr-gridbase($multiplier: 1) {\n  @return ($rr-line-height / $rr-grid-divisions) * $multiplier;\n}\n\n// deprecated\n@function rr-grid-units($steps) {\n  @return rr-gridbase($steps);\n}\n\n// Takes an offset value (like the width of a border) and a number of \n// grid steps; returns the size of the remaining grid step area.\n// Useful primarily for adding borders around things. \n@function rr-grid-remainder($offset, $steps: 1) {\n  $result: 0;\n  @if $steps < 1 {\n    $result: 0;\n  } @else {\n    $stepsize: rr-gridbase($steps);\n    @if comparable($offset, $stepsize) {\n      $result: $stepsize - $offset;\n    } @else {\n      $result: calc(#{$stepsize} - #{$offset});\n    }\n  }\n  @return $result;\n}\n\n// Convenience mixin for building breakpoints around the media queries. \n@mixin rr-break-directive($break, $config: $rr-grid-settings) {\n  @if rr-first-breakpoint($break, $config) {\n    // Base Breakpoint\n    @content;\n    // End base breakpoint\n  } @else {\n    $mq: rr-prop-for-breakpoint($break, mq);\n    $size: rr-prop-for-breakpoint($break, size);\n    @media screen and ($mq: $size) {\n      @content;\n    }\n  }\n}\n\n// Return a breakpoint configuration for the specified tag. \n// The tag is the first-level value in the `$rr-grid-settings` map. \n// Unlike `rr-breakpoint`, this will look up values from earlier \n// breakpoints. \n@function rr-combined-breakpoint($break: s) {\n  $breaks: rr-breakpoint-list();\n  $work-map: rr-breakpoint-first();\n  $stop: index($breaks, $break);\n  @if not $stop {\n    @return $work-map;\n  } // Bounds-check the stop\n  @if ($stop > 1) {\n    @for $i from 2 through $stop {\n      $tag: nth($breaks, $i);\n      $work-map: map-merge($work-map, rr-breakpoint($tag));\n    }\n  }\n  @return $work-map;\n}\n\n// Given a breakpoint tag and a property name, return the property value. \n// This looks for the property in the combined breakpoint.\n@function rr-prop-for-breakpoint($break, $prop) {\n  $bp: rr-combined-breakpoint($break);\n  @if map-has-key($bp, $prop) {\n    @return map-get($bp, $prop);\n  }\n  @return null;\n}\n\n// Given a breakpoint tag and a property name, return the property value. \n// This looks for the property only in the specified breakpoint.\n@function rr-strict-prop-for-breakpoint($break, $prop) {\n  $bp: rr-breakpoint($break);\n  @if map-has-key($bp, $prop) {\n    @return map-get($bp, $prop);\n  }\n  @return null;\n}\n"]}